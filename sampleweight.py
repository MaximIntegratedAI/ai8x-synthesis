###################################################################################################
#
# Copyright (C) 2019 Maxim Integrated Products, Inc. All Rights Reserved.
#
# Maxim Confidential
#
###################################################################################################
"""
Contains hard coded sample weights.
"""
import sys
import numpy as np


def load(dataset, _quantization):
    """
    Return sample weights.
    """
    weights = []
    bias = []
    fc_weights = []
    fc_bias = []
    output_channels = []
    input_channels = []
    layers = 0

    dataset = dataset.lower()

    if dataset == 'test_conv1d':
        layers = 1
        w = np.array([[[-1, -56, -24, 125, 90, 127, -55, 37, -33],
                       [-119, 127, -33, -128, 97, 101, -128, -128, -12],
                       [-60, 116, -128, -62, -56, 85, 108, -11, 42]],
                      [[60, 127, -128, -117, -128, 87, 127, -128, 127],
                       [7, 120, -92, -128, -51, -44, -128, -128, 97],
                       [-70, 127, 127, 36, 124, -80, 44, 127, -82]],
                      [[-82, 42, 48, 127, -92, 63, 127, 127, -128],
                       [91, -5, 4, -33, 83, -28, -128, 127, -119],
                       [-22, 97, 118, -49, -128, -128, 60, -128, 69]],
                      [[-84, 127, -128, -70, 19, -58, -128, 127, -2],
                       [127, 81, -60, 33, -128, -55, 10, -46, 127],
                       [-71, -114, 98, 105, 64, -2, -67, 64, 82]],
                      [[-71, 78, -128, 127, 1, -128, -81, 127, -64],
                       [-9, 127, -83, -128, -61, -65, 127, 118, -67],
                       [-56, 127, 127, 127, -119, 77, 95, 4, 99]]],
                     dtype=np.int64)
        input_channels.append(w.shape[1])  # Input channels
        output_channels.append(w.shape[0])  # Output channels
        weights.append(w.reshape(-1, w.shape[-1]))
        bias.append(None)
    elif dataset == 'test_conv1x1':
        layers = 1
        w = np.array([[-48, 2, -128, -33, 108, -80, -67, -112, -74, -71, -65,
                       36, -26, 47, -124, -48, -119],
                      [19, -36, 25, 35, 72, 2, 11, 46, -52, -51, 48,
                       -26, -26, 103, -15, 18, 33],
                      [-94, 25, 98, 86, -85, 73, 12, -39, 95, 5, -119,
                       104, -78, -23, 12, 107, 6],
                      [94, 89, 64, 75, 65, 63, -117, -11, 91, 7, 62,
                       -49, 43, -51, -108, -29, -3],
                      [-30, 54, 56, 45, -110, 55, 75, 31, -89, -29, 22,
                       -29, -75, 37, 43, -108, -4],
                      [-8, -111, 97, -65, 101, -111, 48, -105, 126, 22, 103,
                       76, -14, -83, -26, -68, 68],
                      [3, -55, 53, 77, 107, 88, 73, -81, -86, 76, -29,
                       87, -104, -123, 117, 92, -117],
                      [-63, 75, 60, 42, -91, 48, 105, 33, -46, 79, -4,
                       37, 90, 59, 111, -2, -8],
                      [65, 71, -4, -104, 68, -18, 110, 49, 46, -18, 116,
                       -29, -79, 33, 7, 95, -99],
                      [67, -72, -87, 42, -19, -108, -49, 59, 1, 62, -29,
                       -106, 102, 0, 110, 84, -114],
                      [-16, -52, -127, -34, 66, -42, 56, -20, 86, -96, 68,
                       -71, 111, 117, -53, 58, 75],
                      [95, -36, -87, 121, -29, 113, 4, -97, -67, -84, 66,
                       -78, 73, 17, -26, 101, 26],
                      [38, 52, -81, -119, 76, -43, -13, -55, -44, 72, 45,
                       -46, -56, 35, -35, -59, 45]],
                     dtype=np.int64)
        input_channels.append(w.shape[1])  # Input channels
        output_channels.append(w.shape[0])  # Output channels
        weights.append(w.reshape(-1, 1, 1))
        bias.append(None)
    else:
        print(f"No sample weights for dataset `{dataset}`.")
        sys.exit(1)

    return layers, weights, bias, fc_weights, fc_bias, input_channels, output_channels
