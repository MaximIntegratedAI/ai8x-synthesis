#!/usr/bin/env python3
###################################################################################################
# Copyright (C) 2019 Maxim Integrated Products, Inc, All Rights Reserved.
#
# Maxim Integrated Products, Inc, Default Copyright Notice:
# https://www.maximintegrated.com/en/aboutus/legal/copyrights.html
#
# Written by RM
###################################################################################################
"""
Test the convtranspose2d operator.
"""
import numpy as np
import torch
import compute
import tensorflow as tf
import os
import sys
sys.path.append(os.path.join('../ai8x-training/TensorFlow'))
import ai8xTF 

STRIDE = 2
PAD = 1
DILATION = 1
OUTPUT_PAD = 1
def clamp(x, minimum=-128, maximum=127):
    """
    clamp with max/min
    """
    return np.array(tf.clip_by_value(x, minimum, maximum))

def deconvolve(groups, data, weight, w1, wl, expected):

    """Upsample data"""
    print('Input:\n', data.shape,data)
    wflip = np.flip(weight, axis=(2, 3)).swapaxes(0, 1)
    wunflip = np.flip(wflip, axis=(2, 3)).swapaxes(0, 1)
    assert np.array_equal(wunflip, weight)
    print("W/D:",weight.shape, data.shape,weight,data)
    
    c = torch.nn.functional.conv_transpose2d(
        torch.as_tensor(data, dtype=torch.float).unsqueeze(0),
        torch.as_tensor(np.flip(weight, axis=(2, 3)).swapaxes(0, 1).copy(), dtype=torch.float),
        bias=None,
        stride=STRIDE,
        padding=PAD,
        output_padding=OUTPUT_PAD,
        groups=groups,
        dilation=DILATION,
    )

    c = (0.5 + c)//128
    print("cshape ",c.shape,c)
    print("wlshape ",wl.shape)

    c = torch.flatten(torch.as_tensor(c, dtype=torch.float))
    
    l = torch.nn.functional.linear(
        torch.as_tensor(c, dtype=torch.float),
        torch.as_tensor(wl.swapaxes(0, 1), dtype=torch.float),
    ).int().squeeze().numpy()

    l = np.flip(l)
    print("Pytorch :")
    l = clamp(np.floor(0.5 + l) / 128).astype(np.int64)
    print(l.shape, l)

    test_input = data
    input_layer = tf.keras.Input(shape=(3, 5))
    reshape = tf.keras.layers.Reshape(target_shape=(3, 5, 1))(input_layer)

    conv1 = tf.keras.layers.Conv2DTranspose(
        filters=1, 
        kernel_size=3, 
        strides=STRIDE, 
        padding="same", 
        output_padding=OUTPUT_PAD,
        dilation_rate=DILATION, 
        use_bias=False,
        kernel_initializer=tf.keras.initializers.constant(w1)
    )(reshape)
    conv1 = (0.5 + conv1)//128

    flat = tf.keras.layers.Flatten()(conv1)

    output_layer = tf.keras.layers.Dense(3, 
                                         use_bias=False,
                                         kernel_initializer=tf.keras.initializers.constant(wl)
                   )(flat)

    model = tf.keras.Model(inputs=[input_layer], outputs=[conv1, flat, output_layer])
    model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
    conv_out, flat_out, output = model.predict(test_input)
    output = np.squeeze(output,0)
 
    
    # Model output
    print('TF/Keras :')
    output = clamp(np.floor(0.5 + output) / 128).astype(np.int64)
    print(output.shape,output)
    
    test_input = data
    test_input = clamp(np.floor(test_input + 0.5))/128.0
    w2 =  clamp(np.floor(0.5 + w1))/128.0
    d1 = wl

    input_layer = tf.keras.Input(shape=(3, 5))
    reshape = tf.keras.layers.Reshape(target_shape=(3, 5, 1))(input_layer)
    conv1 = ai8xTF.FusedConv2DTranspose(
        filters=1,
        kernel_size=3,
        strides=2,
        use_bias=False,
        kernel_initializer=tf.keras.initializers.constant(w2)
    )(reshape)

    flat = tf.keras.layers.Flatten()(conv1)

    output_layer = ai8xTF.FusedDense(3,
                                     wide=True,
                                     kernel_initializer=tf.keras.initializers.constant(d1))(flat)

    model = tf.keras.Model(inputs=[input_layer], outputs=[conv1,flat,output_layer])
    model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

    conv1_out, flat1_out, output1 = model.predict(test_input)

    output1 = np.squeeze(output1,0)
    output1 = clamp(np.floor(0.5 + output)).astype(np.int64)
    print('ai8xTF :')
    print(output1.shape)
    print((output1).astype(np.int64))


    if groups > 1:
        weight = weight.transpose(1, 0, 2, 3)
    '''
    output = compute.conv2d(
        data,
        weight,
        None,
        data.shape,
        expected.shape,
        kernel_size=[3, 3],
        stride=[1, 1],
        #stride=[2, 2],
        pad=[PAD, PAD],
        #pad=[0, 0],
        #pad=[2, 2],
        dilation=[DILATION, DILATION],
        #dilation=[0, 0],
        fractional_stride=[2, 2],
        #fractional_stride=[1, 1],
        #output_pad=[OUTPUT_PAD, OUTPUT_PAD],
        output_pad=[0, 0],
        groups=groups,
        debug=True,
    )
    print("Pytorch and TensorFlow results match" if np.array_equal(output, t) else "*** FAILURE ***")
    assert np.array_equal(output, t)
    '''
    '''
    print('Output before division:\n', output)
    output += 64
    output //= 128
    

    print('Output:\n', output)

    print('Expected:\n', expected)
    print("SUCCESS" if np.array_equal(output, expected) else "*** FAILURE ***")
    assert np.array_equal(output, expected)
    '''

def test_convtranspose2d():
    """Main program to test compute.conv2d with fractional stride."""

    # 3x4x4 (CHW)
    d0 = np.array(
           [[[-90, -77, -64, -51, -38],
            [-26, -13,   0,  13,  26],
            [ 38,  51,  64,  77,  90]]],
        dtype=np.int64,
    )
    '''
           [[[-90, -77, -64, -51, -38],
            [-26, -13,   0,  13,  26],
            [ 38,  51,  64,  77,  90]]],
    '''
    '''
          [[[-90],
            [-77],
            [-64],
            [-51],
            [-38]],
           [[-26],
            [-13],
            [  0],
            [ 13],
            [ 26]],
           [[ 38],
            [ 51],
            [ 64],
            [ 77],
            [ 90]]],
    '''
    print("d0.shape: ",d0.shape)

    # 3x5x3x3
    w1 = np.array(
        [[[[[-13]],
           [[ 13]],
           [[-26]]],
          [[[ 26]],
           [[-38]],
           [[ 38]]],
          [[[-51]],
           [[ 51]],
           [[-64]]]]],
        dtype=np.int64,
    )
    #     [-13, 13, -26, 26,-38, 38, -51, 51, -64],
    print("w0.shape: ",w1.shape)
    w0 = np.squeeze(w1,0)
    print("w0.shape: ",w0.shape)
    w0 = np.transpose(w0,(2,3,0,1)) #v(d)
    print("w0.shape: ",w0.shape)
    #w0 = np.flip(w0, axis=(2, 3))
    #w0 = w1
    print("w0.shape: ",w0.shape)

    wl = np.array(
            [[[-115, -114, -113 ],
              [-111, -110, -109 ],
              [-107, -106, -105 ],
              [-104, -102, -101 ],
              [-100,  -98,  -97 ],
              [ -96,  -95,  -93 ],
              [ -92,  -91,  -89 ],
              [ -88,  -87,  -86 ],
              [ -84,  -83,  -82 ],
              [ -80,  -79,  -78 ],
              [ -77,  -75,  -74 ],
              [ -73,  -71,  -70 ],
              [ -69,  -68,  -66 ],
              [ -65,  -64,  -62 ],
              [ -61,  -60,  -59 ],
              [ -57,  -56,  -55 ],
              [ -53,  -52,  -51 ],
              [ -50,  -48,  -47 ],
              [ -46,  -44,  -43 ],
              [ -42,  -41,  -39 ],
              [ -38,  -37,  -35 ],
              [ -34,  -33,  -32 ],
              [ -30,  -29,  -28 ],
              [ -26,  -25,  -24 ],
              [ -23,  -21,  -20 ],
              [ -19,  -17,  -16 ],
              [ -15,  -14,  -12 ],
              [ -11,  -10,   -8 ],
              [  -7,   -6,   -5 ],
              [  -3,   -2,   -1 ],
              [   1,    2,    3 ],
              [   5,    6,    7 ],
              [   8,   10,   11 ],
              [  12,   14,   15 ],
              [  16,   17,   19 ],
              [  20,   21,   23 ],
              [  24,   25,   26 ],
              [  28,   29,   30 ],
              [  32,   33,   34 ],
              [  35,   37,   38 ],
              [  39,   41,   42 ],
              [  43,   44,   46 ],
              [  47,   48,   50 ],
              [  51,   52,   53 ],
              [  55,   56,   57 ],
              [  59,   60,   61 ],
              [  62,   64,   65 ],
              [  66,   68,   69 ],
              [  70,   71,   73 ],
              [  74,   75,   77 ],
              [  78,   79,   80 ],
              [  82,   83,   84 ],
              [  86,   87,   88 ],
              [  89,   91,   92 ],
              [  93,   95,   96 ],
              [  97,   98,  100 ],
              [ 101,  102,  104 ],
              [ 105,  106,  107 ],
              [ 109,  110,  111 ],
              [ 113,  114,  115 ]]],
        dtype=np.int64,
    )
    wl = np.squeeze(wl,0)
    print("wl.shape: ",wl.shape)
    '''
              [-115, -114, -113, -111, -110, -109, -107, -106, -105, -104, -102, -101,
               -100,  -98,  -97,  -96,  -95,  -93,  -92,  -91,  -89,  -88,  -87,  -86,
                -84,  -83,  -82,  -80,  -79,  -78,  -77,  -75,  -74,  -73,  -71,  -70,
                -69,  -68,  -66,  -65,  -64,  -62,  -61,  -60,  -59,  -57,  -56,  -55,
                -53,  -52,  -51,  -50,  -48,  -47,  -46,  -44,  -43,  -42,  -41,  -39,
                -38,  -37,  -35,  -34,  -33,  -32,  -30,  -29,  -28,  -26,  -25,  -24,
                -23,  -21,  -20,  -19,  -17,  -16,  -15,  -14,  -12,  -11,  -10,   -8,
                 -7,   -6,   -5,   -3,   -2,   -1,    1,    2,    3,    5,    6,    7,
                  8,   10,   11,   12,   14,   15,   16,   17,   19,   20,   21,   23,
                 24,   25,   26,   28,   29,   30,   32,   33,   34,   35,   37,   38,
                 39,   41,   42,   43,   44,   46,   47,   48,   50,   51,   52,   53,
                 55,   56,   57,   59,   60,   61,   62,   64,   65,   66,   68,   69,
                 70,   71,   73,   74,   75,   77,   78,   79,   80,   82,   83,   84,
                 86,   87,   88,   89,   91,   92,   93,   95,   96,   97,   98,  100,
                101,  102,  104,  105,  106,  107,  109,  110,  111,  113,  114,  115],
    '''
    '''
      [[[-115, -114, -113],
        [-112, -111, -110],
        [-109, -108, -107],
        [-106, -105, -104],
        [-103, -102, -101],
        [-100,  -99,  -98],
        [ -97,  -96,  -95],
        [ -94,  -93,  -92],
        [ -91,  -90,  -89],
        [ -88,  -87,  -86],
        [ -85,  -84,  -83],
        [ -82,  -81,  -80],
        [ -79,  -78,  -77],
        [ -76,  -75,  -74],
        [ -73,  -72,  -71],
        [ -70,  -69,  -68],
        [ -67,  -66,  -65],
        [ -64,  -63,  -62],
        [ -61,  -60,  -59],
        [ -58,  -57,  -56],
        [ -55,  -54,  -53],
        [ -52,  -51,  -50],
        [ -49,  -48,  -47],
        [ -46,  -45,  -44],
        [ -43,  -42,  -41],
        [ -40,  -39,  -38],
        [ -37,  -36,  -35],
        [ -34,  -33,  -32],
        [ -31,  -30,  -29],
        [ -28,  -27,  -26],
        [ -25,  -24,  -23],
        [ -22,  -21,  -20],
        [ -19,  -18,  -17],
        [ -16,  -15,  -14],
        [ -13,  -12,  -11],
        [ -10,   -9,   -8],
        [  -7,   -6,   -5],
        [  -4,   -3,   -2],
        [  -1,    0,    1],
        [   2,    3,    4],
        [   5,    6,    7],
        [   8,    9,   10],
        [  11,   12,   13],
        [  14,   15,   16],
        [  17,   18,   19],
        [  20,   21,   22],
        [  23,   24,   25],
        [  26,   27,   28],
        [  29,   30,   31],
        [  32,   33,   34],
        [  35,   36,   37],
        [  38,   39,   40],
        [  41,   42,   43],
        [  44,   45,   46],
        [  47,   48,   49],
        [  50,   51,   52],
        [  53,   54,   55],
        [  56,   57,   58],
        [  59,   60,   61],
        [  62,   63,   64],
        [  65,   66,   67],
        [  68,   69,   70],
        [  71,   72,   73],
        [  74,   75,   76],
        [  77,   78,   79],
        [  80,   81,   82],
        [  83,   84,   85],
        [  86,   87,   88],
        [  89,   90,   91],
        [  92,   93,   94],
        [  95,   96,   97],
        [  98,   99,  100],
        [ 101,  102,  103],
        [ 104,  105,  106],
        [ 107,  108,  109],
        [ 110,  111,  112],
        [ 113,  114,  115]]],
        dtype=np.int64,
    )
    '''

    '''
      [[[-115,-115,-114],
        [-114,-113,-113],
        [-112,-112,-111],
        [-111,-111,-110],
        [-110,-109,-109],
        [-108,-108,-107],
        [-107,-106,-106],
        [-105,-105,-104],
        [-104,-104,-103],
        [-103,-102,-102],
        [-101,-101,-100],
        [-100, -99, -99],
        [ -98, -98, -97],
        [ -97, -97, -96],
        [ -96, -95, -95],
        [ -94, -94, -93],
        [ -93, -92, -92],
        [ -91, -91, -90],
        [ -90, -90, -89],
        [ -89, -88, -88],
        [ -87, -87, -86],
        [ -86, -85, -85],
        [ -84, -84, -83],
        [ -83, -83, -82],
        [ -82, -81, -81],
        [ -80, -80, -79],
        [ -79, -78, -78],
        [ -77, -77, -76],
        [ -76, -76, -75],
        [ -75, -74, -74],
        [ -73, -73, -72],
        [ -72, -71, -71],
        [ -70, -70, -69],
        [ -69, -69, -68],
        [ -68, -67, -67],
        [ -66, -66, -65],
        [ -65, -64, -64],
        [ -63, -63, -62],
        [ -62, -62, -61],
        [ -61, -60, -60],
        [ -59, -59, -58],
        [ -58, -57, -57],
        [ -56, -56, -56],
        [ -55, -55, -54],
        [ -54, -53, -53],
        [ -52, -52, -51],
        [ -51, -50, -50],
        [ -49, -49, -49],
        [ -48, -48, -47],
        [ -47, -46, -46],
        [ -45, -45, -44],
        [ -44, -43, -43],
        [ -42, -42, -42],
        [ -41, -41, -40],
        [ -40, -39, -39],
        [ -38, -38, -37],
        [ -37, -36, -36],
        [ -35, -35, -35],
        [ -34, -34, -33],
        [ -33, -32, -32],
        [ -31, -31, -30],
        [ -30, -29, -29],
        [ -28, -28, -28],
        [ -27, -27, -26],
        [ -26, -25, -25],
        [ -24, -24, -23],
        [ -23, -22, -22],
        [ -21, -21, -21],
        [ -20, -20, -19],
        [ -19, -18, -18],
        [ -17, -17, -16],
        [ -16, -15, -15],
        [ -14, -14, -14],
        [ -13, -13, -12],
        [ -12, -11, -11],
        [ -10, -10,  -9],
        [  -9,  -8,  -8],
        [  -7,  -7,  -7],
        [  -6,  -6,  -5],
        [  -5,  -4,  -4],
        [  -3,  -3,  -2],
        [  -2,  -1,  -1],
        [   0,   0,   0],
        [   1,   1,   2],
        [   2,   3,   3],
        [   4,   4,   5],
        [   5,   6,   6],
        [   7,   7,   7],
        [   8,   8,   9],
        [   9,  10,  10],
        [  11,  11,  12],
        [  12,  13,  13],
        [  14,  14,  14],
        [  15,  15,  16],
        [  16,  17,  17],
        [  18,  18,  19],
        [  19,  20,  20],
        [  21,  21,  21],
        [  22,  22,  23],
        [  23,  24,  24],
        [  25,  25,  26],
        [  26,  27,  27],
        [  28,  28,  28],
        [  29,  29,  30],
        [  30,  31,  31],
        [  32,  32,  33],
        [  33,  34,  34],
        [  35,  35,  35],
        [  36,  36,  37],
        [  37,  38,  38],
        [  39,  39,  40],
        [  40,  41,  41],
        [  42,  42,  42],
        [  43,  43,  44],
        [  44,  45,  45],
        [  46,  46,  47],
        [  47,  48,  48],
        [  49,  49,  49],
        [  50,  50,  51],
        [  51,  52,  52],
        [  53,  53,  54],
        [  54,  55,  55],
        [  56,  56,  56],
        [  57,  57,  58],
        [  58,  59,  59],
        [  60,  60,  61],
        [  61,  62,  62],
        [  62,  63,  63],
        [  64,  64,  65],
        [  65,  66,  66],
        [  67,  67,  68],
        [  68,  69,  69],
        [  69,  70,  70],
        [  71,  71,  72],
        [  72,  73,  73],
        [  74,  74,  75],
        [  75,  76,  76],
        [  76,  77,  77],
        [  78,  78,  79],
        [  79,  80,  80],
        [  81,  81,  82],
        [  82,  83,  83],
        [  83,  84,  84],
        [  85,  85,  86],
        [  86,  87,  87],
        [  88,  88,  89],
        [  89,  90,  90],
        [  90,  91,  91],
        [  92,  92,  93],
        [  93,  94,  94],
        [  95,  95,  96],
        [  96,  97,  97],
        [  97,  98,  98],
        [  99,  99, 100],
        [ 100, 101, 101],
        [ 102, 102, 103],
        [ 103, 104, 104],
        [ 104, 105, 105],
        [ 106, 106, 107],
        [ 107, 108, 108],
        [ 109, 109, 110],
        [ 110, 111, 111],
        [ 111, 112, 112],
        [ 113, 113, 114],
        [ 114, 115, 115]]],
    '''
    
    #wl = np.squeeze(wl,0)
    #wl = wl.swapaxes(0, 1)
    print("wls ", wl.shape)

    # 5x8x8
    e0 = np.array(
       [[[[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 81,  72],
         [ 62,  53],
         [112,  94],
         [ 53,  45],
         [ 94,  79],
         [ 44,  38],
         [ 76,  64],
         [ 35,  30],
         [ 58,  49],
         [ 26,  22],
         [ 18,  14],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 24,  14],
         [  5,  -5],
         [  6, -12],
         [  4,  -4],
         [  5, -10],
         [  4,  -3],
         [  4,  -9],
         [  3,  -3],
         [  2,  -8],
         [  2,  -2],
         [ -6, -10],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-10, -22],
         [-35, -47],
         [-76, -98],
         [-36, -45],
         [-79, -95],
         [-37, -44],
         [-81, -92],
         [-39, -43],
         [-84, -89],
         [-40, -41],
         [-43, -44],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  7,   4],
         [  1,  -1],
         [ -1,  -5],
         [  1,  -1],
         [ -2,  -3],
         [  0,   0],
         [ -3,  -2],
         [ -1,   1],
         [ -5,  -1],
         [ -1,   1],
         [  4,   7],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-44, -43],
         [-41, -40],
         [-89, -84],
         [-43, -39],
         [-92, -81],
         [-44, -37],
         [-95, -79],
         [-45, -36],
         [-98, -76],
         [-47, -35],
         [-22, -10],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-10,  -6],
         [ -2,   2],
         [ -8,   2],
         [ -3,   3],
         [ -9,   4],
         [ -3,   4],
         [-10,   5],
         [ -4,   4],
         [-12,   6],
         [ -5,   5],
         [ 14,  24],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 14,  18],
         [ 22,  26],
         [ 49,  58],
         [ 30,  35],
         [ 64,  76],
         [ 38,  44],
         [ 79,  94],
         [ 45,  53],
         [ 94, 112],
         [ 53,  62],
         [ 72,  81],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]]]],
        dtype=np.int64,
    )
    '''
        [[[[ 81,  72],
          [ 62,  53],
          [112,  94],
          [ 53,  45],
          [ 94,  79],
          [ 44,  38],
          [ 76,  64],
          [ 35,  30],
          [ 58,  49],
          [ 26,  22],
          [ 18,  14]],
         [[ 24,  14],
          [  5,  -5],
          [  6, -12],
          [  4,  -4],
          [  5, -10],
          [  4,  -3],
          [  4,  -9],
          [  3,  -3],
          [  2,  -8],
          [  2,  -2],
          [ -6, -10]],
         [[-10, -22],
          [-35, -47],
          [-76, -98],
          [-36, -45],
          [-79, -95],
          [-37, -44],
          [-81, -92],
          [-39, -43],
          [-84, -89],
          [-40, -41],
          [-43, -44]],
         [[  7,   4],
          [  1,  -1],
          [ -1,  -5],
          [  1,  -1],
          [ -2,  -3],
          [  0,   0],
          [ -3,  -2],
          [ -1,   1],
          [ -5,  -1],
          [ -1,   1],
          [  4,   7]],
         [[-44, -43],
          [-41, -40],
          [-89, -84],
          [-43, -39],
          [-92, -81],
          [-44, -37],
          [-95, -79],
          [-45, -36],
          [-98, -76],
          [-47, -35],
          [-22, -10]],
         [[-10,  -6],
          [ -2,   2],
          [ -8,   2],
          [ -3,   3],
          [ -9,   4],
          [ -3,   4],
          [-10,   5],
          [ -4,   4],
          [-12,   6],
          [ -5,   5],
          [ 14,  24]],
         [[ 14,  18],
          [ 22,  26],
          [ 49,  58],
          [ 30,  35],
          [ 64,  76],
          [ 38,  44],
          [ 79,  94],
          [ 45,  53],
          [ 94, 112],
          [ 53,  62],
          [ 72,  81]]]],
    '''
    '''
       [[[[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 81,  72],
         [ 62,  53],
         [112,  94],
         [ 53,  45],
         [ 94,  79],
         [ 44,  38],
         [ 76,  64],
         [ 35,  30],
         [ 58,  49],
         [ 26,  22],
         [ 18,  14],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 24,  14],
         [  5,  -5],
         [  6, -12],
         [  4,  -4],
         [  5, -10],
         [  4,  -3],
         [  4,  -9],
         [  3,  -3],
         [  2,  -8],
         [  2,  -2],
         [ -6, -10],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-10, -22],
         [-35, -47],
         [-76, -98],
         [-36, -45],
         [-79, -95],
         [-37, -44],
         [-81, -92],
         [-39, -43],
         [-84, -89],
         [-40, -41],
         [-43, -44],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  7,   4],
         [  1,  -1],
         [ -1,  -5],
         [  1,  -1],
         [ -2,  -3],
         [  0,   0],
         [ -3,  -2],
         [ -1,   1],
         [ -5,  -1],
         [ -1,   1],
         [  4,   7],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-44, -43],
         [-41, -40],
         [-89, -84],
         [-43, -39],
         [-92, -81],
         [-44, -37],
         [-95, -79],
         [-45, -36],
         [-98, -76],
         [-47, -35],
         [-22, -10],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [-10,  -6],
         [ -2,   2],
         [ -8,   2],
         [ -3,   3],
         [ -9,   4],
         [ -3,   4],
         [-10,   5],
         [ -4,   4],
         [-12,   6],
         [ -5,   5],
         [ 14,  24],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [ 14,  18],
         [ 22,  26],
         [ 49,  58],
         [ 30,  35],
         [ 64,  76],
         [ 38,  44],
         [ 79,  94],
         [ 45,  53],
         [ 94, 112],
         [ 53,  62],
         [ 72,  81],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]],
        [[  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0],
         [  0,   0]]]],
    '''
    #print("e0.shape: ",e0.shape)

    deconvolve(1, d0, w0, w1, wl, e0)



if __name__ == '__main__':
    test_convtranspose2d()
